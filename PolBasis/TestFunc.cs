using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using PolBasis;

namespace PolBasis
{
    class TestFunc
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase
            [TestCase
            [TestCase
            [TestCase("001110000111","111", "1110000000")]
            [TestCase("1011010","1001100","10110")]
            [TestCase("0010110","10011","101")]
            [TestCase("10110","10011","101")]

            [TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
        "0",
        "11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101")]
     
            
            public void AddTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);

                var actualResult = Field.Byte_To_String(Field.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
            public void ZeroFindTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Add(a, a));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("1110101001111111","111010100111111100000000000000000000")]
            public void ShiftBitsTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.ShiftBits(a,20));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("00110111011011000011110010011100000010011110000110100111011110011111101110000001011110101110000110011111001110101110100110011011101111001111100011110110100001101000111101101010111",
        "0",
        "0")]
            [TestCase("00010101110101000110101011001110001111001110010011010000110101001100101100010111001101110110000101000100111011010001000111101111011010011010001000100110001001011110101010000111101",
                "01010100010101001100111110110101101110111101110011100010110011111101100011100010100001001101001000000101100101011000011110011001100111111011000100011010101110111100010011110010101",
                "10000011110111111100101111110111111010101111001100111010010101010100011001011011110101011111000001000100111010110000001010110011100011100101100010110001110010011000100111000010000")]
            [TestCase("11100011011110100000000001001010011101011011011100101111011001100110100010000000101111111101111010011110111011001100110000001010000011011101000000000100011000100010110111001101000",
                "11100011011010001000110001110000110001001110110101110110100101111110110010011001001000000101010111100010101101000101000001101001111110101110111111101100000101000001011010010100111",
                "1100000111100001000101010101110010111001100101011001001100011100011111111011100011111101000100101111101010000010100011110000111010100000100001100010110000011010101000101001100101")]
           
            [TestCase("00001100001001001111010101000111110111000011001100111000100010001001001111111101100010100111011001100111011001010100010000000101110000001001111011001111000111101101001010111111101",
        "00111001011110001010010011111010001011001000111101010110110101011111101100100100000111010100110011100100010101100111110010100100010101011110011111000100110101010101010100001011110",
        "10111001010100001011101110010111110000010101111100101001110001001100101101101000010111100111110110001110001111110101011101110111011111101101010100110101100111100111111011100001011")]
            [TestCase("10110010001101110100010110001100011000110001110001011001101111111000010100001001101011100111010000010000111011001110100000101010001100011001110010111001010100011010100110010001100",
                "11010010110011001100100000010000110100111110110001101011111001111000011000100001101111011110111100111011011111001111110100100000101001000000100010111101010100000100100000111110111",
                "11011011010010110010101010001011011000000000000010111100011001100110011100100010010000000001011001001100101101000011100010001011011011111111111000001001000001001010101100101110010")]
            [TestCase("01100111001010000110111011010100100011111000010001111001010010101010011101100100010110011001111001101011001000010000111010010010000001000101011111101001011010110000001010110001110",
        "10001101101101010000011000101110011110100000101110010011011101110000110001100001001001101000111000100110000001111110011010011000100111010011100000101011100011001101011100010010110",
        "1010000001101101010000010100110110001110111110011101001111100000101000000000101111110010011111100100010001101111010100100010110100011010011111010010011111101000011110101100111")]
            public void MulTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);

                var actualResult = Field.Byte_To_String(Field.Mul(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }


        }
    }
}
