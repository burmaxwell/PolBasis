using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using PolBasis;

namespace PolBasis
{
    class TestFunc
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000", 
                "01110001001101101101110010111001111110011111100011011011010101110111101001110001001000010000101010001011001011011100000000001011000010010001101001100100100110111011001110000",
                "10011011010010010011110010011101111100001100100001011101011000000010111101011100000010111001100000111010001110010000110110011000001101000000100011010111010100010000001100000")]
            [TestCase


            [TestCase("01111001001100011010111110001010111011100010001011011110010010000011011001101110111111101100001001100011101011100110111111011000010000110111101011100101011101011110100100011010111", 
                "10010100001000010101011000100001000010001110000111100010110001101001111010000010000101001001101011111010100101010010100000001001101010000001111001000110110001011011100101111010010", 
                "11101101000100001111100110101011111001101100001100111100100011101010100011101100111010100101100010011001001110110100011111010001111010110110010010100011101100000101000001100000101")]
            [TestCase("001110000111","111", "1110000000")]
            [TestCase("1011010","1001100","10110")]
            [TestCase("0010110","10011","101")]
            [TestCase("10110","10011","101")]

            [TestCase("11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101",
        "0",
        "11110111011011100001010011010000101110101010110000101001100101010000011000010011100000101111110010110011111111110101111000011000010010110110011101001111111001011010010110101")]
     
            
            public void AddTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);

                var actualResult = Field.Byte_To_String(Field.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000", 
                "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
            public void ZeroFindTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Add(a, a));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("1110101001111111","111010100111111100000000000000000000")]
            public void ShiftBitsTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.ShiftBits(a,20));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("00110111011011000011110010011100000010011110000110100111011110011111101110000001011110101110000110011111001110101110100110011011101111001111100011110110100001101000111101101010111",
        "0",
        "0")]
            [TestCase("00010101110101000110101011001110001111001110010011010000110101001100101100010111001101110110000101000100111011010001000111101111011010011010001000100110001001011110101010000111101",
                "01010100010101001100111110110101101110111101110011100010110011111101100011100010100001001101001000000101100101011000011110011001100111111011000100011010101110111100010011110010101",
                "10000011110111111100101111110111111010101111001100111010010101010100011001011011110101011111000001000100111010110000001010110011100011100101100010110001110010011000100111000010000")]
            [TestCase("11100011011110100000000001001010011101011011011100101111011001100110100010000000101111111101111010011110111011001100110000001010000011011101000000000100011000100010110111001101000",
                "11100011011010001000110001110000110001001110110101110110100101111110110010011001001000000101010111100010101101000101000001101001111110101110111111101100000101000001011010010100111",
                "1100000111100001000101010101110010111001100101011001001100011100011111111011100011111101000100101111101010000010100011110000111010100000100001100010110000011010101000101001100101")]         
            [TestCase("00001100001001001111010101000111110111000011001100111000100010001001001111111101100010100111011001100111011001010100010000000101110000001001111011001111000111101101001010111111101",
        "00111001011110001010010011111010001011001000111101010110110101011111101100100100000111010100110011100100010101100111110010100100010101011110011111000100110101010101010100001011110",
        "10111001010100001011101110010111110000010101111100101001110001001100101101101000010111100111110110001110001111110101011101110111011111101101010100110101100111100111111011100001011")]
            [TestCase("10110010001101110100010110001100011000110001110001011001101111111000010100001001101011100111010000010000111011001110100000101010001100011001110010111001010100011010100110010001100",
                "11010010110011001100100000010000110100111110110001101011111001111000011000100001101111011110111100111011011111001111110100100000101001000000100010111101010100000100100000111110111",
                "11011011010010110010101010001011011000000000000010111100011001100110011100100010010000000001011001001100101101000011100010001011011011111111111000001001000001001010101100101110010")]
            [TestCase("01100111001010000110111011010100100011111000010001111001010010101010011101100100010110011001111001101011001000010000111010010010000001000101011111101001011010110000001010110001110",
        "10001101101101010000011000101110011110100000101110010011011101110000110001100001001001101000111000100110000001111110011010011000100111010011100000101011100011001101011100010010110",
        "00001010000001101101010000010100110110001110111110011101001111100000101000000000101111110010011111100100010001101111010100100010110100011010011111010010011111101000011110101100111")]
            [TestCase("10111100010111101101000011011001001010100001010100110001110000011100101001100001110100101110111101111111001110011010001110111110101111101111100000111110101101000011010000001100100",
                "00101101100100111100011010011110100110001001001101000101100110010001111001110000100010000101000110010010000101001110110101010010011110100010101000111000001101101111010110000010001",
                "11100011001010011000001110011010000111110011101001101111100000101011010110010101101111110100010001001111100101100100110000001111001111100011100010111000111110111101111100000011100")]
            [TestCase("11011001011100010000111000111010000000010011100010100011100110000001010000101101001111100000100111001001001100111100010001001111000110100011111000011010101111001111011011000010011",
                "10010011101111101101000110111001101100111000001110000111110010101111011000000101001110001110001111100100101010101111010000110100000011000000010111001011010000001100001010110010101",
                "00110010111011111111110110000000010101000001100100010110011101111100101100100011011001011010001101110100000110100110001001110110011011001110111110010110100000110010110011100001001")]
            [TestCase("10111010000110011111111111100001010110010111000000000010111110001111000110011001001111100001100111001001110100001010100101010001101111100010011010010111101100011110011000110110101",
                "00011100101111111100101111111001101111110111110001101101111100110110100010100100000110111101100001010101001111001011110101011010000001001111111111101110011000111001101010110111111",
                "00011100010010101110111101100001011101100101001001000101101000110001010001111111110111101110110111111010101100100101001011001010100010001110011111101100110010100010100011111101000")]
            public void MulTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);

                var actualResult = Field.Byte_To_String(Field.Mul(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("10110010001101110100010110001100011000110001110001011001101111111000010100001001101011100111010000010000111011001110100000101010001100011001110010111001010100011010100110010001100",
                "01000110100011011000110000010100010011000000000010011100010110111001000100100000111110010101100110000111110110011001000111100100001101001101010101001011011000100010101101110100011",
                "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")]
            public void OneFindTest(string pol1, string pol2 ,string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);
                var actualResult = Field.Byte_To_String(Field.Mul(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11100100010000101101000100100011111001011011101010000111011110011110101100011011010001110001100000110011000101001000100101010000000100110011111010111111011000011101110000101111101"
                , "11100111011100010101100001110000101011111001010101011110010001110110010101100010100001101011000111101011100110000001010001111011010010011000000110011000000010100101001110011010101")]
            [TestCase("00010011001001101101001100100010111100100110110001001101010100111110001110011100100011010000100101111101001011001110101110110101010100110010011010110100010001010000000010100011001",
                "00010101010000111111011110100000100001011100100111111110011100101101001111010101101000001001100101010100000001000100111111001111011011001100011011010011101101111110010010001111001")]
            [TestCase("01001111011101010110101001000010001001100111011010001001001111100011001010111111001100100111001011000101010001110110100011101101100010001011001010001100011100111000100010101101100",
                "11011100110110001011101011101110101010010011010111010010010111101111111110100111001110000010101111101101111101010100110101101100111000110111001110001101111110010110100111010100111")]
            [TestCase("01101110010101111000010010000100101111100100011001010110100111101001111111010010101110101000101000100000001011100011101111000000010100000111111011100111110100111111001111100101010",
                "00101010110011010100011000111110111000111101010111101011010111110000111111101101111110010010110111001100100010110111001101000011010110111101010100001111011100110010111000010011101")]
            [TestCase("01101001001001111000000110111010010111011100001111001011110000100010110000010110110110110011001111100011101011101101111101101111111000000100010010010010101110100100011100101010101",
                "00000001111111011111110100010100111000101011000000000100001101011100000100001001000100000100111100110101000011011011100001111110011100101001000010010110100000001000000010101011110")]
            [TestCase("11010011111100111011010011110001011010011000001110101001010010110110101011100100010101111110101110111010110100010001111110010111001001010101010111011101111111100001110100011001000",
                "00000101011001011101000101101100000000100111110011110001101111000010000101111010111000001100011000010001010111001111111100000000100000110011100011100111111110010110110000111101010")]
            public void SquareTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Square(a));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11010011111100111011010011110001011010011000001110101001010010110110101011100100010101111110101110111010110100010001111110010111001001010101010111011101111111100001110100011001000",
                "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
            [TestCase("10001000101001001100111000001101001101101100001110101000011100101011011111111110011011101111101010110101101010100001010011100101111001111110011100100001000011101110101000010100011",
                "1")]
            [TestCase("00000000001100010111000111001110010101011011000000111010111010100011101111011110000001010000010111001101001010010100101100000000111110001010101011110011101110011100100000101000001",
                "1")]
            public void TraceTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Trace(a));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11001000000000000111111100011011110100100011111000000110010010101101000101110100111000101101000010000101010011101000111011100000001001000011110101110111010100010010101011100001010",
                "00100100000000001101010010110011000100010101010011101100001001111101100101101110110011101010000011000000111111001010001010001001011110001101101110010000110010111010000011010110101",
                "1010101110011011101111111111011010100010111001000111001000011011011000011010010100111101000110001001000000101111111001000101110011111110100110001111110101001001011100111110100001")]
            [TestCase("01100111100101101100111111100000101000110001110101110010001001001100011001100101110110110101000111110101010000001100111110011011010111010010111011101000110010110111001000010100011",
                "10110011001010101000001111101001001000110100111011001000001000010110011010110100101110100010000101000011011111110000101100101100001101010010010011011001110101100101011010000111011",
                "00010101101100001110111110100010101111010110110111011111110111101100100111101110010110000011010010101111111101010000110101011000101111011011010010011000011000100100101010100111110")]
            [TestCase("10100011111010010100011101110001010110000000011111010101110110100010011000111101000100101000100011110011000100100010111101010000001100110101101010010110000100001000100101110010110",
                "00101101101000001010111011001100001110011001110000111101110000001010101011111001011001010000001110010000100001100100100101101111010000000010100100010101010010100110100100011101101",
                "11111111100111001010011000011001101100010011000101001001011101111011011000111001100100010001111101001010101101111110011110100010110011001111110101101100000010001100000001111100000")]
            [TestCase("00110000110001001011001111110001100001111100110000111110001010111100101010010111011111110011101111100000010001110111010010000011111100011010100101111010011100010111100110010111111",
                "00000010110101001100001111101000011001000000001000010111010101111100111101110101101000110100011001011100101010011000100010000010011000010000101010111011101010100110001000001110110",
                "00100100111000011001110101010010110110011101110111111001000011010100010111101001110101101111101010011101000110010101011110110110011010010010100011011110101011111110001010011011000")]
            [TestCase("10111110010010100001000110001111011100111001011011001101111100010101101100110001001000110111000100101110110101011000000111010100001010101110111100001011111011001001011011011101011",
                "00000000010010011010111011101111000101000000111101110110110101011110110100110110010100011001010001111111001010100110101111101011101000100101111111101001001011011001011000000001000",
                "11011011100101011010111101011101111011100110111011101010001100010111011000111100000000101101100110001011011111011101000101000001111010100110101011101001001111101010111000111011111")]


            public void BigPowerTest(string pol1, string N, string expectedResult)
            {
                int[] a = new int[1];
                int[] n = new int[1];
                a = Field.String_To_Byte(pol1);
                n = Field.String_To_Byte(N);
                var actualResult = Field.Byte_To_String(Field.BigPower(a, n));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("00111110000010110010101011001001010101101010110111101010010110101010100001001010110110110111110011100100011101001011101010001000000111001110010011010001111010101111010110111010000",
                "10101111001101110111001001110000101101111010000011110101100100101110000001010001100001001111010000000111000011010100000010101111110101100011000110111101111010100101110111111101101")]
            [TestCase("11001100011000101000001110110000011101100001000110010111111100010100000011101010101001011011011011000100111100000110111010001000011111011000000101110111110001110101010101110011010",
                "00000110111101010110110001001100100001100100111111011101110000111101010101100010011010110001000001100100100000010110101110111111101110001011100110010011111110000001100100011100111")]
            [TestCase("11001001101001001111010001011001001100000010010001101010001101110000101110011000110110011101110001110110100110111010011110110110100100000001111000101001011111111011011010110011010",
                "11000001100000010010110110011001000110000010100000111000110011101001001111001000001100101111110110111011111111011100100110110100000010111011010100111100010011111111111110011011101")]
            [TestCase("11011000011100100110010101010101111100010100011111001011010001000101100001010011100101100011000010110100001001000110110000101001100001111110000001110101011101000101101111010101011",
                "00011001110011001100111110000010000110011111101100010100101011001011110000111000011001101110111111100100010100101011000000000100111011011101111100000010000101001100101100110010101")]
            public void Inverse_elTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Inverse_el(a));
                Assert.AreEqual(expectedResult, actualResult);
            }
        }
    }
}
