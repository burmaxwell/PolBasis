using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using PolBasis;

namespace PolBasis
{
    class TestFunc
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000", "01110001001101101101110010111001111110011111100011011011010101110111101001110001001000010000101010001011001011011100000000001011000010010001101001100100100110111011001110000", "10011011010010010011110010011101111100001100100001011101011000000010111101011100000010111001100000111010001110010000110110011000001101000000100011010111010100010000001100000")]
            [TestCase
            [TestCase

            public void AddTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);

                var actualResult = Field.Byte_To_String(Field.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("11101010011111111110000000100100000010010011000010000110001101110101010100101101001010101001001010110001000101001100110110010011001111010001001010110011110010101011000010000", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")]
            public void ZeroFindTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.Add(a, a));
                Assert.AreEqual(expectedResult, actualResult);
            }


        }
    }
}
